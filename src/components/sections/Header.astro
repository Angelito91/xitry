---
import SwitchLang from "@components/ui/SwitchLang.astro";
import type { HeaderSection } from "src/types";

import Close from "@components/icons/Close.astro";
import Contact from "@components/icons/Contact.astro";
import Crown from "@components/icons/Crown.astro";
import Faq from "@components/icons/Faq.astro";
import Gallery from "@components/icons/Gallery.astro";
// Icons
import Home from "@components/icons/Home.astro";
import Open from "@components/icons/Open.astro";
import Projects from "@components/icons/Project.astro";
import Services from "@components/icons/Services.astro";

interface Props {
	i18n: HeaderSection;
}

const { i18n } = Astro.props;

const navLinks = i18n.navLinks;
const indexContact = navLinks.length - 1;
const navLinksSlice = navLinks.slice(1, indexContact);

const normalize = (link: string) => {
	if (link === "inicio" || link === "accueil") return "home";
	if (link === "contacto") return "contact";
	if (link === "servicios") return "services";
	if (link === "experiencias" || link === "expériences") return "experiences";
	if (link === "proyectos" || link === "projets") return "projects";
	if (link === "galería" || link === "galerie") return "gallery";
	return link;
};
---

<script>
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll(".nav-links a");

    const isAriaLabelHero = (id: string) => {
        return id === "home" || id === "inicio" || id === "accueil";
    };

    const isAriaLabelContact = (id: string) => {
        return id === "contacto" || id === "contact";
    };

    const callback = (entries: any[]) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                history.replaceState(null, "", `#${entry.target.id}`);
                navItems.forEach((item) => {
                    if (
                        item.getAttribute("aria-label") === entry.target.id &&
                        !isAriaLabelHero(entry.target.id)
                    ) {
                        item.classList.add(
                            `${isAriaLabelContact(entry.target.id) ? "bg-primary/20" : "bg-secondary/20"}`,
                        );
                    } else {
                        item.classList.remove(
                            "bg-secondary/20",
                            "bg-primary/20",
                        );
                    }
                });
            }
        });
    };

    const observer = new IntersectionObserver(callback, {
        root: null,
        rootMargin: "0px",
        threshold: 0.5,
    });

    sections.forEach((section) => {
        observer.observe(section);
    });

    document.onvisibilitychange = () => {
        if (document.visibilityState === "hidden") {
            observer.disconnect();
        } else {
            sections.forEach((section) => {
                observer.observe(section);
            });
        }
    };

    const hamburger = document.getElementById("hamburger-button");
    const mobileMenu = document.getElementById("mobile-menu");
    const iconOpen = document.getElementById("icon-open");
    const iconClose = document.getElementById("icon-close");

    hamburger?.addEventListener("click", () => {
        const isOpen = hamburger.getAttribute("aria-expanded") === "true";
        hamburger.setAttribute("aria-expanded", String(!isOpen));

        mobileMenu?.classList.toggle("translate-x-0");
        mobileMenu?.classList.toggle("translate-x-full");

        iconOpen?.classList.toggle("hidden");
        iconClose?.classList.toggle("hidden");
    });
</script>

<header
    class="fixed top-0 z-20 flex items-center justify-between w-full px-8 py-2 font-bold text-white"
>
    <nav class="flex items-center justify-between w-full">
        <a
            href={`#${navLinks[0]}`}
            aria-label={navLinks[0]}
            class="flex items-center justify-center text-lg font-bold transition hover:scale-110 hover:rotate-1"
        >
            <span
                class="text-primary transition duration-150 drop-shadow-[0_0_8px_#BFC5C9]"
                >XITRY</span
            >
            <span
                class="text-secondary transition duration-150 drop-shadow-[0_0_8px_#D1D5DB]"
                >GAME</span
            >
        </a>

        <!-- Desktop Nav -->
        <div
            class="items-center justify-center hidden gap-2 p-2 nav-links md:flex rounded-xl bg-accent/70"
        >
            {
                navLinksSlice.map((link) => (
                    <a
                        href={`#${link}`}
                        aria-label={link}
                        class="p-2 capitalize transition transform rounded-xl hover:bg-secondary/20 hover:scale-110 hover:rotate-1"
                    >
                        {link}
                    </a>
                ))
            }
        </div>
        <div class="items-center justify-center hidden gap-2 md:flex">
            <SwitchLang id="desktop"/>
            <div
                class="flex items-center justify-center gap-2 p-2 nav-links rounded-xl bg-accent/70"
            >
                <a
                    href={`#${navLinks[indexContact]}`}
                    aria-label={navLinks[indexContact]}
                    class="p-2 capitalize transition transform rounded-xl hover:bg-primary/20 hover:scale-110 hover:rotate-1"
                >
                    {navLinks[indexContact]}
                </a>
            </div>
        </div>

        <!-- Botón de hamburguesa -->
        <div class="flex items-center justify-center gap-2 md:hidden">
            <SwitchLang id="mobile" />
            <button
                id="hamburger-button"
                aria-label="Toggle menu"
                aria-expanded="false"
                aria-controls="mobile-menu"
                class="relative z-50 p-2 md:hidden"
            >
                <!-- Ícono hamburguesa -->
                <Open />
                <!-- Ícono de cerrar -->
                <Close />
            </button>
        </div>

        <!-- Menú deslizante -->
        <div
            id="mobile-menu"
            class="fixed top-0 right-0 z-40 flex flex-col items-center justify-center w-3/4 max-w-xs min-h-screen gap-10 px-6 py-10 transition-transform duration-300 ease-in-out transform translate-x-full shadow-lg bg-background backdrop-blur-lg md:hidden"
        >
            {
                navLinks.map((link) => (
                    <a
                        href={`#${link}`}
                        aria-label={link}
                        class="flex justify-center items-center gap-3 p-2 text-lg text-white capitalize transition rounded hover:bg-secondary/20"
                    >
                        {normalize(link) === "home" && <Home />}
                        {normalize(link) === "gallery" && <Gallery />}
                        {normalize(link) === "experiences" && <Crown />}
                        {normalize(link) === "contact" && <Contact />}
                        {normalize(link) === "faq" && <Faq />}
                        {normalize(link) === "projects" && <Projects />}
                        {normalize(link) === "services" && <Services />}
                        {link}
                    </a>
                ))
            }
        </div>
    </nav>
</header>

<style>
    header {
        animation: nav-shadow 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    .nav-links {
        animation: links-shadow 1s linear both;
        animation-timeline: scroll();
        animation-range: 0 100px;
    }

    @keyframes nav-shadow {
        to {
            backdrop-filter: blur(10px);
        }
    }

    @keyframes links-shadow {
        to {
            background-color: transparent;
            font-weight: bold;
        }
    }
</style>
