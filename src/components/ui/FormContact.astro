---
import type { ContactForm } from "src/types";

interface Props {
	i18n: ContactForm;
}

const { i18n } = Astro.props;

const inputs: Array<{
	id: string;
	label: string;
	type?: astroHTML.JSX.HTMLInputTypeAttribute;
	placeholder?: string;
}> = [
	{
		id: "userType",
		label: i18n.userType.label,
	},
	{
		id: "name",
		label: i18n.name.label,
		placeholder: i18n.name.placeholder,
		type: "text",
	},
	{
		id: "companyName",
		label: i18n.companyName.label,
		placeholder: i18n.companyName.placeholder,
	},
	{
		id: "email",
		label: i18n.email.label,
		placeholder: i18n.email.placeholder,
		type: "email",
	},
	{
		id: "phone",
		label: i18n.phone.label,
		placeholder: i18n.phone.placeholder,
		type: "tel",
	},
	{
		id: "message",
		label: i18n.message.label,
		placeholder: i18n.message.placeholder,
	},
];
---

<form
    method="post"
    id="form"
    class="grid w-full max-w-2xl gap-6 px-4 mx-auto text-left sm:px-6"
    novalidate
>
    <input
        type="hidden"
        name="access_key"
        value="8b47129c-9884-40ee-85f4-a2cb0a68c6a0"
    />
    {
        inputs.map((input) => (
            <div
                id={`${input.id}-container`}
                class={`${input.id === "companyName" ? "hidden" : ""} mb-1`}
            >
                <label
                    for={input.id}
                    class="block mb-2 text-sm font-medium sm:text-base text-primary"
                >
                    {input.label}
                </label>

                {input.id === "userType" && (
                    <select
                        id={input.id}
                        name={input.id}
                        required
                        class="w-full px-4 py-3 text-sm text-white border bg-white/5 backdrop-blur border-white/10 rounded-xl sm:py-4 focus:outline-none focus:ring-2 focus:ring-primary sm:text-base"
                        onchange="handleUserTypeChange(event)"
                    >
                        <option value="individual">{i18n.individual}</option>
                        <option value="company">{i18n.company}</option>
                    </select>
                )}

                {input.id === "message" && (
                    <textarea
                        id={input.id}
                        name={input.id}
                        rows="5"
                        required
                        placeholder={input.placeholder}
                        class="w-full px-4 py-3 text-sm text-white border resize-none bg-white/5 backdrop-blur border-white/10 rounded-xl sm:py-4 focus:outline-none focus:ring-2 focus:ring-primary sm:text-base"
                    />
                )}

                {input.id === "phone" && (
                    <input
                        id={input.id}
                        type={input.type}
                        name={input.id}
                        required
                        placeholder={input.placeholder}
                        class="w-full px-4 py-3 text-sm text-white border bg-white/5 backdrop-blur border-white/10 rounded-xl sm:py-4 focus:outline-none focus:ring-2 focus:ring-primary sm:text-base"
                    />
                )}

                {(input.id === "name" ||
                    input.id === "email" ||
                    input.id === "companyName") && (
                    <input
                        id={input.id}
                        name={input.id}
                        type={input.type}
                        required
                        placeholder={input.placeholder}
                        class="w-full px-4 py-3 text-sm text-white border bg-white/5 backdrop-blur border-white/10 rounded-xl sm:py-4 focus:outline-none focus:ring-2 focus:ring-primary sm:text-base"
                    />
                )}
            </div>
        ))
    }
    <div
        id="result"
        class="text-sm font-medium text-center transition-all duration-300 sm:text-base"
        data-required={i18n.validation.required}
        data-phone-invalid={i18n.validation.phoneInvalid}
        data-success={i18n.validation.success}
        data-error={i18n.validation.error}
        data-sending={i18n.validation.sending}
    >
    </div>

    <button
        type="submit"
        class="px-5 py-3 text-sm text-white transition border hover:cursor-pointer border-white/20 bg-white/5 backdrop-blur hover:bg-primary/10 rounded-xl sm:text-base"
    >
        {i18n.submit.label}
    </button>
</form>

<script is:inline>
    function handleUserTypeChange(event) {
        const userType = event.target.value;
        const companyField = document.getElementById("companyName-container");
        const nameField = document.getElementById("name-container");

        if (userType === "company") {
            companyField.classList.remove("hidden");
            nameField.classList.add("hidden");
        } else {
            companyField.classList.add("hidden");
            nameField.classList.remove("hidden");
        }
    }

    const form = document.getElementById("form");
    const result = document.getElementById("result");

    const i18n = {
        required: result.dataset.required,
        phoneInvalid: result.dataset.phoneInvalid,
        success: result.dataset.success,
        error: result.dataset.error,
        sending: result.dataset.sending,
    };

    function showMessage(message, type = "info") {
        result.innerText = message;
        result.className =
            "text-sm sm:text-base font-medium text-center transition-all duration-300 " +
            (type === "error"
                ? "text-red-500"
                : type === "success"
                  ? "text-green-500"
                  : "text-white");
    }

    function validateForm(formData) {
        let isValid = true;
        result.innerHTML = "";
        result.className = "";

        const requiredFields = ["email", "message"];
        requiredFields.forEach((field) => {
            const input = document.getElementById(field);
            const value = formData.get(field)?.trim();
            if (!value || value.length === 0) {
                isValid = false;
                input.classList.add("border-red-500");
            } else {
                input.classList.remove("border-red-500");
            }
        });

        // TelÃ©fono
        const phoneInput = document.getElementById("phone");
        if (phoneInput) {
            const phoneValue = formData.get("phone")?.trim() || "";
            const phoneRegex = /^[+\-\d\s()]{7,}$/;
            if (!phoneRegex.test(phoneValue)) {
                isValid = false;
                phoneInput.classList.add("border-red-500");
                showMessage(i18n.phoneInvalid, "error");
                return false;
            } else {
                phoneInput.classList.remove("border-red-500");
            }
        }

        if (!isValid) {
            showMessage(i18n.required, "error");
        }

        return isValid;
    }

    form.addEventListener("submit", function (e) {
        const formData = new FormData(form);
        e.preventDefault();

        if (!validateForm(formData)) return;

        const object = Object.fromEntries(formData.entries());
        for (const key in object) {
            if (typeof object[key] === "string") {
                object[key] = object[key].trim();
            }
        }

        const json = JSON.stringify(object);
        showMessage(i18n.sending);

        fetch("https://api.web3forms.com/submit", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                Accept: "application/json",
            },
            body: json,
        })
            .then(async (response) => {
                const data = await response.json();
                if (response.status == 200) {
                    showMessage(i18n.success, "success");
                } else {
                    showMessage(data.message || i18n.error, "error");
                }
            })
            .catch((error) => {
                console.error(error);
                showMessage(i18n.error, "error");
            })
            .then(() => {
                form.reset();
                setTimeout(() => {
                    result.innerHTML = "";
                }, 4000);
            });
    });
</script>
